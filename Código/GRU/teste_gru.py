# -*- coding: utf-8 -*-
"""Teste_GRU.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X37rdGh8iSlFGCrQHc4HPZF5EvXFAuAq
"""

import tensorflow as tf
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv('/content/sample_data/dataset_arredondado_unidades.csv', sep=';')
df

df.index = pd.to_datetime(df['Time'], format='%d_%m_%Y_%H_%M_%S')
df[:26]

column_to_remove = ['Time']
df = df.drop(column_to_remove, axis=1) #Remover a coluna date time já que esta se encontra indexada
df

level_F1 = df['F1']
level_F1 = pd.concat([ level_F1, df['F2']], axis=1)
level_F1 = pd.concat([ level_F1, df['F3']], axis=1)
level_F1 = pd.concat([ level_F1, df['F6']], axis=1)
level_F1 = pd.concat([ level_F1, df['F8']], axis=1)
level_F1 = pd.concat([ level_F1, df['F9']], axis=1)
level_F1 = pd.concat([ level_F1, df['F10']], axis=1)
level_F1 = pd.concat([ level_F1, df['F13']], axis=1)
level_F1 = pd.concat([ level_F1, df['F14']], axis=1)
level_F1 = pd.concat([ level_F1, df['F15']], axis=1)
level_F1 = pd.concat([ level_F1, df['F16']], axis=1)
level_F1 = pd.concat([ level_F1, df['F17']], axis=1)
level_F1 = pd.concat([ level_F1, df['F18']], axis=1)
level_F1

def df_to_X_y(df, window_size=14):
  df_as_np = df.to_numpy()
  X=[]
  y=[]
  for i in range(len(df_as_np)-window_size):
    row = [r for r in df_as_np[i:i+window_size]]
    X.append(row)
    label = df_as_np[i+window_size]
    y.append(label)
  return np.array(X), np.array(y)

X, y = df_to_X_y(level_F1)
X.shape, y.shape

train_size = int(0.7 * X.shape[0])
X_train, y_train = X[:train_size], y[:train_size]
X_val, y_val = X[train_size:train_size + int((X.shape[0]-train_size)/2)], y[train_size:train_size + int(int((X.shape[0]-train_size)/2))]
X_test, y_test = X[train_size + int((X.shape[0]-train_size)/2):], y[train_size + int((X.shape[0]-train_size)/2):]

X_train.shape, y_train.shape, X_val.shape, y_val.shape,X_test.shape, y_test.shape

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import *
from tensorflow.keras.callbacks import ModelCheckpoint
from tensorflow.keras.losses import MeanSquaredError
from tensorflow.keras.metrics import RootMeanSquaredError
from tensorflow.keras.optimizers import Adam

model = Sequential()
model.add(InputLayer((14,13)))
model.add(GRU(256))
model.add(Dropout(0.1))
model.add(Dense(32,'relu'))
model.add(Dense(13,'linear'))


model.summary()

cp1 = ModelCheckpoint('model1/', save_best_only=True)
model.compile(loss=MeanSquaredError(), optimizer=Adam(learning_rate=0.001), metrics=[RootMeanSquaredError()])

model.fit(X_train,y_train, batch_size =32, validation_data=(X_val,y_val),epochs=15,callbacks=[cp1])

import matplotlib.pyplot as plt
from sklearn.metrics import precision_score, recall_score, f1_score


def mape(y, y_hat):
    return np.mean(np.abs((y - y_hat)/y)*100)

def smape_adjusted(a, f):
    return (1/a.size * np.sum(np.abs(f-a) / (np.abs(a) + np.abs(f))*100))

def rmse(y, y_hat):
    return np.sqrt(np.mean(np.square(y - y_hat)))

def mae(y, y_hat):
    return np.mean(np.abs(y - y_hat))

def plot_predictions1(model, X, y, start=0, end=100):
  predictions = model.predict(X)
  f1_preds = predictions[:, 0]
  f1_actuals = y[:, 0]

  f1_preds = np.nan_to_num(f1_preds, nan=0.0)

  df = pd.DataFrame(data={'F1 Predictions': f1_preds,
                          'F1 Actuals':f1_actuals,
                          })
  plt.plot(df['F1 Predictions'][start:end], label = 'Previsões')
  plt.plot(df['F1 Actuals'][start:end], label= 'Valores reais')
  plt.xlabel('Tempo')
  plt.ylabel('Quantidade do material')
  plt.ylim(0, 100)
  plt.legend()

  mape_value = mape(df['F1 Actuals'], df['F1 Predictions'])
  smape_value = smape_adjusted(df['F1 Actuals'], df['F1 Predictions'])
  rmse_value = rmse(df['F1 Actuals'], df['F1 Predictions'])
  mae_value = mae(df['F1 Actuals'], df['F1 Predictions'])

  print("MAE:", mae_value)

  print("RMSE:", rmse_value)

  print("SMAPE", smape_value)

  print("Mape", mape_value)

  return df[start:end]

#train_predictions = model.predict(X_test).flatten()
#train_results = pd.DataFrame(data={'Train Predictions':train_predictions, 'Actuals':y_test})
#train_results

def plot_predictions2(model, X, y, start=0, end=100):
  predictions = model.predict(X)
  f2_preds = predictions[:, 1]
  f2_actuals =  y[:, 1]


  f2_preds = np.nan_to_num(f2_preds, nan=0.0)

  df = pd.DataFrame(data={'F2 Predictions': f2_preds,
                          'F2 Actuals': f2_actuals
                          })
  plt.plot(df['F2 Predictions'][start:end], label = 'Previsões')
  plt.plot(df['F2 Actuals'][start:end], label = 'Valores reais')
  plt.xlabel('Tempo')
  plt.ylabel('Quantidade do material')
  plt.ylim(0, 100)
  plt.legend()

  #precision = precision_score(np.round(f2_actuals), np.round(f2_preds), average='weighted')
  #recall = recall_score(np.round(f2_actuals), np.round(f2_preds), average='weighted')
  #f1 = f1_score(np.round(f2_actuals), np.round(f2_preds), average='weighted')

  #print("Precision:", precision)
  #print("Recall:", recall)
  #print("F1 Score:", f1)
  mape_value = mape(df['F2 Actuals'], df['F2 Predictions'])
  smape_value = smape_adjusted(df['F2 Actuals'], df['F2 Predictions'])
  rmse_value = rmse(df['F2 Actuals'], df['F2 Predictions'])
  mae_value = mae(df['F2 Actuals'], df['F2 Predictions'])

  print("MAE:", mae_value)

  print("RMSE:", rmse_value)

  print("SMAPE", smape_value)

  print("Mape", mape_value)
  return df[start:end]

def plot_predictions3(model, X, y, start=0, end=100):
  predictions = model.predict(X)
  f3_preds = predictions[:, 2]
  f3_actuals =  y[:, 2]

  f3_preds = np.nan_to_num(f3_preds, nan=0.0)

  df = pd.DataFrame(data={'F3 Predictions': f3_preds,
                          'F3 Actuals': f3_actuals
                          })
  plt.plot(df['F3 Predictions'][start:end], label = 'Previsões')
  plt.plot(df['F3 Actuals'][start:end], label = 'Valores reais')

  plt.xlabel('Tempo')
  plt.ylabel('Quantidade do material')
  plt.ylim(0, 100)
  plt.legend()

  #precision = precision_score(np.round(f3_actuals), np.round(f3_preds), average='weighted')
  #recall = recall_score(np.round(f3_actuals), np.round(f3_preds), average='weighted')
  #f1 = f1_score(np.round(f3_actuals), np.round(f3_preds), average='weighted')
  mape_value = mape(df['F3 Actuals'], df['F3 Predictions'])
  smape_value = smape_adjusted(df['F3 Actuals'], df['F3 Predictions'])
  rmse_value = rmse(df['F3 Actuals'], df['F3 Predictions'])
  mae_value = mae(df['F3 Actuals'], df['F3 Predictions'])

  print("MAE:", mae_value)
  print("RMSE:", rmse_value)
  print("SMAPE", smape_value)
  print("Mape", mape_value)

  #print("Precision:", precision)
  #print("Recall:", recall)
  #print("F1 Score:", f1)
  return df[start:end]

def plot_predictions4(model, X, y, start=0, end=100):
  predictions = model.predict(X)
  f6_preds = predictions[:, 3]
  f6_actuals =  y[:, 3]

  f6_preds = np.nan_to_num(f6_preds, nan=0.0)

  df = pd.DataFrame(data={'F6 Predictions': f6_preds,
                          'F6 Actuals': f6_actuals
                          })
  plt.plot(df['F6 Predictions'][start:end], label = 'Previsões')
  plt.plot(df['F6 Actuals'][start:end], label = 'Valores reais')

  plt.xlabel('Tempo')
  plt.ylabel('Quantidade do material')
  plt.ylim(0, 100)
  plt.legend()

  #precision = precision_score(np.round(f6_actuals), np.round(f6_preds), average='weighted')
  #recall = recall_score(np.round(f6_actuals), np.round(f6_preds), average='weighted')
  #f1 = f1_score(np.round(f6_actuals), np.round(f6_preds), average='weighted')

  mape_value = mape(df['F6 Actuals'], df['F6 Predictions'])
  smape_value = smape_adjusted(df['F6 Actuals'], df['F6 Predictions'])
  rmse_value = rmse(df['F6 Actuals'], df['F6 Predictions'])
  mae_value = mae(df['F6 Actuals'], df['F6 Predictions'])

  print("MAE:", mae_value)
  print("RMSE:", rmse_value)

  print("SMAPE", smape_value)

  print("Mape", mape_value)

  #print("Precision:", precision)
  #print("Recall:", recall)
  #print("F1 Score:", f1)

  return df[start:end]

def plot_predictions5(model, X, y, start=0, end=100):
  predictions = model.predict(X)
  f8_preds = predictions[:, 4]
  f8_actuals =  y[:, 4]

  f8_preds = np.nan_to_num(f8_preds, nan=0.0)

  df = pd.DataFrame(data={'F8 Predictions': f8_preds,
                          'F8 Actuals': f8_actuals
                          })
  plt.plot(df['F8 Predictions'][start:end], label = 'Previsões')
  plt.plot(df['F8 Actuals'][start:end], label = 'Valores reais')

  plt.xlabel('Tempo')
  plt.ylabel('Quantidade do material')
  plt.ylim(0, 100)
  plt.legend()
  #precision = precision_score(np.round(f8_actuals), np.round(f8_preds), average='weighted')
  #recall = recall_score(np.round(f8_actuals), np.round(f8_preds), average='weighted')
  #f1 = f1_score(np.round(f8_actuals), np.round(f8_preds), average='weighted')
  mape_value = mape(df['F8 Actuals'], df['F8 Predictions'])
  smape_value = smape_adjusted(df['F8 Actuals'], df['F8 Predictions'])
  rmse_value = rmse(df['F8 Actuals'], df['F8 Predictions'])
  mae_value = mae(df['F8 Actuals'], df['F8 Predictions'])

  print("MAE:", mae_value)
  print("RMSE:", rmse_value)

  print("SMAPE", smape_value)

  print("Mape", mape_value)

  #print("Precision:", precision)
  #print("Recall:", recall)
  #print("F1 Score:", f1)
  return df[start:end]

def plot_predictions6(model, X, y, start=0, end=100):
  predictions = model.predict(X)
  f9_preds = predictions[:, 5]
  f9_actuals =  y[:, 5]

  f9_preds = np.nan_to_num(f9_preds, nan=0.1)

  df = pd.DataFrame(data={'F9 Predictions': f9_preds,
                          'F9 Actuals': f9_actuals
                          })
  plt.plot(df['F9 Predictions'][start:end], label = 'Previsões')
  plt.plot(df['F9 Actuals'][start:end], label = 'Valores reais')

  plt.xlabel('Tempo')
  plt.ylabel('Quantidade do material')
  plt.ylim(0, 100)
  plt.legend()

  #precision = precision_score(np.round(f9_actuals), np.round(f9_preds), average='weighted')
  #recall = recall_score(np.round(f9_actuals), np.round(f9_preds), average='weighted')
  #f1 = f1_score(np.round(f9_actuals), np.round(f9_preds), average='weighted')
  mape_value = mape(df['F9 Actuals'], df['F9 Predictions'])
  smape_value = smape_adjusted(df['F9 Actuals'], df['F9 Predictions'])
  rmse_value = rmse(df['F9 Actuals'], df['F9 Predictions'])
  mae_value = mae(df['F9 Actuals'], df['F9 Predictions'])

  print("MAE:", mae_value)
  print("RMSE:", rmse_value)

  print("SMAPE", smape_value)

  print("Mape", mape_value)

  #print("Precision:", precision)
  #print("Recall:", recall)
  #print("F1 Score:", f1)

  return df[start:end]

def plot_predictions7(model, X, y, start=0, end=100):
  predictions = model.predict(X)
  f10_preds = predictions[:, 6]
  f10_actuals =  y[:, 6]

  f10_preds = np.nan_to_num(f10_preds, nan=0.0)

  df = pd.DataFrame(data={'F10 Predictions': f10_preds,
                          'F10 Actuals': f10_actuals
                          })
  plt.plot(df['F10 Predictions'][start:end], label = 'Previsões')
  plt.plot(df['F10 Actuals'][start:end], label = 'Valores reais')

  plt.xlabel('Tempo')
  plt.ylabel('Quantidade do material')
  plt.ylim(0, 100)
  plt.legend()

  #precision = precision_score(np.round(f10_actuals), np.round(f10_preds), average='weighted')
  #recall = recall_score(np.round(f10_actuals), np.round(f10_preds), average='weighted')
  #f1 = f1_score(np.round(f10_actuals), np.round(f10_preds), average='weighted')
  mape_value = mape(df['F10 Actuals'], df['F10 Predictions'])
  smape_value = smape_adjusted(df['F10 Actuals'], df['F10 Predictions'])
  rmse_value = rmse(df['F10 Actuals'], df['F10 Predictions'])
  mae_value = mae(df['F10 Actuals'], df['F10 Predictions'])

  print("MAE:", mae_value)
  print("RMSE:", rmse_value)

  print("SMAPE", smape_value)

  print("Mape", mape_value)

  #print("Precision:", precision)
  #print("Recall:", recall)
  #print("F1 Score:", f1)
  return df[start:end]

def plot_predictions8(model, X, y, start=0, end=100):
  predictions = model.predict(X)
  f13_preds = predictions[:, 7]
  f13_actuals =  y[:, 7]

  f13_preds = np.nan_to_num(f13_preds, nan=0.0)

  df = pd.DataFrame(data={'F13 Predictions': f13_preds,
                          'F13 Actuals': f13_actuals
                          })
  plt.plot(df['F13 Predictions'][start:end], label = 'Previsões')
  plt.plot(df['F13 Actuals'][start:end], label = 'Valores reais')

  plt.xlabel('Tempo')
  plt.ylabel('Quantidade do material')
  plt.ylim(0, 100)
  plt.legend()

  #precision = precision_score(np.round(f13_actuals), np.round(f13_preds), average='weighted')
  #recall = recall_score(np.round(f13_actuals), np.round(f13_preds), average='weighted')
  #f1 = f1_score(np.round(f13_actuals), np.round(f13_preds), average='weighted')
  mape_value = mape(df['F13 Actuals'], df['F13 Predictions'])
  smape_value = smape_adjusted(df['F13 Actuals'], df['F13 Predictions'])
  rmse_value = rmse(df['F13 Actuals'], df['F13 Predictions'])
  mae_value = mae(df['F13 Actuals'], df['F13 Predictions'])

  print("MAE:", mae_value)
  print("RMSE:", rmse_value)

  print("SMAPE", smape_value)

  print("Mape", mape_value)

  #print("Precision:", precision)
  #print("Recall:", recall)
  #print("F1 Score:", f1)
  return df[start:end]

def plot_predictions9(model, X, y, start=0, end=100):
  predictions = model.predict(X)
  f14_preds = predictions[:, 8]
  f14_actuals =  y[:, 8]

  f14_preds = np.nan_to_num(f14_preds, nan=0.0)

  df = pd.DataFrame(data={'F14 Predictions': f14_preds,
                          'F14 Actuals': f14_actuals
                          })
  plt.plot(df['F14 Predictions'][start:end], label = 'Previsões')
  plt.plot(df['F14 Actuals'][start:end], label = 'Valores reais')

  plt.xlabel('Tempo')
  plt.ylabel('Quantidade do material')
  plt.ylim(0, 100)
  plt.legend()

  #precision = precision_score(np.round(f14_actuals), np.round(f14_preds), average='weighted')
  #recall = recall_score(np.round(f14_actuals), np.round(f14_preds), average='weighted')
  #f1 = f1_score(np.round(f14_actuals), np.round(f14_preds), average='weighted')
  mape_value = mape(df['F14 Actuals'], df['F14 Predictions'])
  smape_value = smape_adjusted(df['F14 Actuals'], df['F14 Predictions'])
  rmse_value = rmse(df['F14 Actuals'], df['F14 Predictions'])
  mae_value = mae(df['F14 Actuals'], df['F14 Predictions'])

  print("MAE:", mae_value)
  print("RMSE:", rmse_value)

  print("SMAPE", smape_value)

  print("Mape", mape_value)

  #print("Precision:", precision)
  #print("Recall:", recall)
  #print("F1 Score:", f1)
  return df[start:end]

def plot_predictions10(model, X, y, start=0, end=100):
  predictions = model.predict(X)
  f15_preds = predictions[:, 9]
  f15_actuals =  y[:, 9]

  f15_preds = np.nan_to_num(f15_preds, nan=0.0)

  df = pd.DataFrame(data={'F15 Predictions': f15_preds,
                          'F15 Actuals': f15_actuals
                          })
  plt.plot(df['F15 Predictions'][start:end], label = 'Previsões')
  plt.plot(df['F15 Actuals'][start:end], label = 'Valores reais')

  plt.xlabel('Tempo')
  plt.ylabel('Quantidade do material')
  plt.ylim(0, 100)
  plt.legend()

  #precision = precision_score(np.round(f15_actuals), np.round(f15_preds), average='weighted')
  #recall = recall_score(np.round(f15_actuals), np.round(f15_preds), average='weighted')
  #f1 = f1_score(np.round(f15_actuals), np.round(f15_preds), average='weighted')

  mape_value = mape(df['F15 Actuals'], df['F15 Predictions'])
  smape_value = smape_adjusted(df['F15 Actuals'], df['F15 Predictions'])
  rmse_value = rmse(df['F15 Actuals'], df['F15 Predictions'])
  mae_value = mae(df['F15 Actuals'], df['F15 Predictions'])

  print("MAE:", mae_value)
  print("RMSE:", rmse_value)

  print("SMAPE", smape_value)

  print("MAPE", mape_value)
  #print("Precision:", precision)
  #print("Recall:", recall)
  #print("F1 Score:", f1)
  return df[start:end]

def plot_predictions11(model, X, y, start=0, end=100):
  predictions = model.predict(X)
  f16_preds = predictions[:, 10]
  f16_actuals =  y[:, 10]

  f16_preds = np.nan_to_num(f16_preds, nan=0.0)

  df = pd.DataFrame(data={'F16 Predictions': f16_preds,
                          'F16 Actuals': f16_actuals
                          })
  plt.plot(df['F16 Predictions'][start:end], label = 'Previsões')
  plt.plot(df['F16 Actuals'][start:end], label = 'Valores reais')

  plt.xlabel('Tempo')
  plt.ylabel('Quantidade do material')
  plt.ylim(0, 100)
  plt.legend()

  #precision = precision_score(np.round(f16_actuals), np.round(f16_preds), average='weighted')
  #recall = recall_score(np.round(f16_actuals), np.round(f16_preds), average='weighted')
  #f1 = f1_score(np.round(f16_actuals), np.round(f16_preds), average='weighted')
  mape_value = mape(df['F16 Actuals'], df['F16 Predictions'])
  smape_value = smape_adjusted(df['F16 Actuals'], df['F16 Predictions'])
  rmse_value = rmse(df['F16 Actuals'], df['F16 Predictions'])
  mae_value = mae(df['F16 Actuals'], df['F16 Predictions'])

  print("MAE:", mae_value)
  print("RMSE:", rmse_value)

  print("SMAPE", smape_value)

  print("Mape", mape_value)

  #print("Precision:", precision)
  #print("Recall:", recall)
  #print("F1 Score:", f1)
  return df[start:end]

def plot_predictions12(model, X, y, start=0, end=100):
  predictions = model.predict(X)
  f17_preds = predictions[:, 11]
  f17_actuals =  y[:, 11]

  f17_preds = np.nan_to_num(f17_preds, nan=0.0)

  df = pd.DataFrame(data={'F17 Predictions': f17_preds,
                          'F17 Actuals': f17_actuals
                          })
  plt.plot(df['F17 Predictions'][start:end], label = 'Previsões')
  plt.plot(df['F17 Actuals'][start:end], label = 'Valores reais')

  plt.xlabel('Tempo')
  plt.ylabel('Quantidade do material')
  plt.ylim(0, 100)
  plt.legend()

  #precision = precision_score(np.round(f17_actuals), np.round(f17_preds), average='weighted')
  #recall = recall_score(np.round(f17_actuals), np.round(f17_preds), average='weighted')
  #f1 = f1_score(np.round(f17_actuals), np.round(f17_preds), average='weighted')
  mape_value = mape(df['F17 Actuals'], df['F17 Predictions'])
  smape_value = smape_adjusted(df['F17 Actuals'], df['F17 Predictions'])
  rmse_value = rmse(df['F17 Actuals'], df['F17 Predictions'])
  mae_value = mae(df['F17 Actuals'], df['F17 Predictions'])

  print("MAE:", mae_value)
  print("RMSE:", rmse_value)

  print("SMAPE", smape_value)

  print("Mape", mape_value)

  #print("Precision:", precision)
  #print("Recall:", recall)
  #print("F1 Score:", f1)
  return df[start:end]

def plot_predictions13(model, X, y, start=0, end=100):
  predictions = model.predict(X)
  f18_preds = predictions[:, 12]
  f18_actuals =  y[:, 12]

  f18_preds = np.nan_to_num(f18_preds, nan=0.0)

  df = pd.DataFrame(data={'F18 Predictions': f18_preds,
                          'F18 Actuals': f18_actuals
                          })
  plt.plot(df['F18 Predictions'][start:end], label = 'Previsões')
  plt.plot(df['F18 Actuals'][start:end], label = 'Valores reais')

  plt.xlabel('Tempo')
  plt.ylabel('Quantidade do material')
  plt.ylim(0, 100)
  plt.legend()

  #precision = precision_score(np.round(f18_actuals), np.round(f18_preds), average='weighted')
  #recall = recall_score(np.round(f18_actuals), np.round(f18_preds), average='weighted')
  #f1 = f1_score(np.round(f18_actuals), np.round(f18_preds), average='weighted')
  mape_value = mape(df['F18 Actuals'], df['F18 Predictions'])
  smape_value = smape_adjusted(df['F18 Actuals'], df['F18 Predictions'])
  rmse_value = rmse(df['F18 Actuals'], df['F18 Predictions'])
  mae_value = mae(df['F18 Actuals'], df['F18 Predictions'])

  print("MAE:", mae_value)
  print("RMSE:", rmse_value)

  print("SMAPE", smape_value)

  print("Mape", mape_value)

  #print("Precision:", precision)
  #print("Recall:", recall)
  #print("F1 Score:", f1)
  return df[start:end]

plot_predictions1(model, X_test, y_test)

plot_predictions2(model, X_test, y_test)

plot_predictions3(model, X_test, y_test)

plot_predictions4(model, X_test, y_test)

plot_predictions5(model, X_test, y_test)

plot_predictions6(model, X_test, y_test)

plot_predictions7(model, X_test, y_test)

plot_predictions8(model, X_test, y_test)

plot_predictions9(model, X_test, y_test)

plot_predictions10(model, X_test, y_test)

plot_predictions11(model, X_test, y_test)

plot_predictions12(model, X_test, y_test)

plot_predictions13(model, X_test, y_test)